using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using EGroceryStore.Models;
using System.Net;
using System.Data.Entity;
using System.IO;

namespace EGroceryStore.Controllers
{
    public class ProductController : Controller
    {
        public EGroceryContext db = new EGroceryContext();

        //  Home page of admin 
        public ActionResult Index()
        {
            if (Session["AdminId"] == null)
            {
                return RedirectToAction("Login", "Account");
            }
            else
            {
                var t = db.Products.ToList();
                Response.Cache.SetCacheability(HttpCacheability.NoCache);
                Response.Cache.SetExpires(DateTime.UtcNow.AddHours(-1));
                Response.Cache.SetNoStore();
                return View(t);
            }
        }


        // Details view page  (admin part )
        public ActionResult Details(int? id)
        {
            if (Session["AdminId"] == null)
            {
                return RedirectToAction("Login", "Account");
            }
            else
            {
                if (id == null)
                    return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
                Product product = db.Products.Find(id);
                if (product == null)
                    return HttpNotFound();
                Response.Cache.SetCacheability(HttpCacheability.NoCache);
                Response.Cache.SetExpires(DateTime.UtcNow.AddHours(-1));
                Response.Cache.SetNoStore();
                return View(product);
            }
        }


        // Creating new product (admin part ) 
        public ActionResult Create()
        {
            if (Session["AdminId"] == null)
            {
                return RedirectToAction("Login", "Account");
            }
            else
            {
                Response.Cache.SetCacheability(HttpCacheability.NoCache);
                Response.Cache.SetExpires(DateTime.UtcNow.AddHours(-1));
                Response.Cache.SetNoStore();
                return View();
            }
        }


        // Save the new product (admin part ) 
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(Product product, HttpPostedFileBase uploadImage)
        {
            if (ModelState.IsValid)
            {              
                db.Products.Add(product);
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            return View(product);
        }


        // Edit the product (admin part ) 
        public ActionResult Edit(int? id)
        {
            if (Session["AdminId"] == null)
            {
                return RedirectToAction("Login", "Account");
            }
            else
            {
                if (id == null)
                    return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
                Product product = db.Products.Find(id);
                if (product == null)
                    return HttpNotFound();
                Response.Cache.SetCacheability(HttpCacheability.NoCache);
                Response.Cache.SetExpires(DateTime.UtcNow.AddHours(-1));
                Response.Cache.SetNoStore();
                return View(product);
            }
        }


        // Save the editted product (admin part )
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(Product product)
        {
            if (ModelState.IsValid)
            {
                db.Entry(product).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            return View(product);
        }


        // Delete the product  view (admin part ) 
        public ActionResult Delete(int? id)
        {
            if (Session["AdminId"] == null)
            {
                return RedirectToAction("Login", "Account");
            }
            else
            {
                if (id == null)
                    return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
                Product product = db.Products.Find(id);
                if (product == null)
                    return HttpNotFound();
                Response.Cache.SetCacheability(HttpCacheability.NoCache);
                Response.Cache.SetExpires(DateTime.UtcNow.AddHours(-1));
                Response.Cache.SetNoStore();
                return View(product);
            }
        }


        // Delete the product  (admin part )
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            Product product = db.Products.Find(id);
            db.Products.Remove(product);
            db.SaveChanges();
            return RedirectToAction("Index");
        }


        // Customer Home page after login    
        public ActionResult Shop(String search)
        {

            // Message received ol placing successful Order
            if (TempData["Message"] != null)
            {
                TempData["Message"] = "Order Placed Successfully";
            }


            // If person is login then only access to shop page or else go to login page 

            var products = from p in db.Products
                           select p;
            if (Session["CustomerId"] == null)
            {
                return RedirectToAction("Login", "Account");
            }
            else
            {
                if (!string.IsNullOrEmpty(search))
                {
                    products = products.Where(p => p.Name.Contains(search));
                }
                Response.Cache.SetCacheability(HttpCacheability.NoCache);
                Response.Cache.SetExpires(DateTime.UtcNow.AddHours(-1));
                Response.Cache.SetNoStore();
                return View(products.ToList());
            }
        }

    }
}
