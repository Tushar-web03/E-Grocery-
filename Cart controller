using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using EGroceryStore.Models;
using System.Data.Entity;

namespace EGroceryStore.Controllers
{
    public class CartController : Controller
    {
        public EGroceryContext db = new EGroceryContext();


        // Customer adding the product in cart 
        [HttpPost]
        public ActionResult AddToCart(int productId, int quantity )
        {
            var product=db.Products.Find(productId);
            if (product==null)
            {
                return HttpNotFound("Not Found");
            }
            if (product.Quantity < quantity)
            {
                return Content("Out of Stock");
            }
            product.Quantity -= quantity;
            db.SaveChanges();
            var cart = Session["Cart"] as List<CartItem> ??  new List<CartItem>();
            cart.Add (new CartItem
                {
                    ProductId=product.ProductId,
                    ProductName=product.Name,
                    Price=product.Price,
                    Quantity= quantity,
                    //Total = product.Price * quantity
                });
            Session["Cart"]=cart;
            return RedirectToAction("Shop", "Product");
        }


        //  Showing the cart summary to customer 
            public ActionResult Index()
        {
            if (Session["CustomerId"] == null)
            {
                return RedirectToAction("Login", "Account");
            }
            else
            {
                Response.Cache.SetCacheability(HttpCacheability.NoCache);
                Response.Cache.SetExpires(DateTime.UtcNow.AddHours(-1));
                Response.Cache.SetNoStore();
                var cart = Session["Cart"] as List<CartItem> ?? new List<CartItem>();
                return View(cart);
            }
        }


        // Removing the item from cart 
            public ActionResult RemoveFromCart(int id)
            {
                var cart = Session["Cart"] as List<CartItem>;
                if (cart!=null)
                {
                    var itemToRemove = cart.FirstOrDefault(c => c.ProductId == id);
                    if (itemToRemove != null)
                    {
                        var product = db.Products.Find(id);
                        if (product != null)
                        {
                            product.Quantity += itemToRemove.Quantity;
                            db.Entry(product).State = EntityState.Modified;
                            db.SaveChanges();
                        }
                        cart.Remove(itemToRemove);
                        Session["Cart"]= cart;
                    }
                }
                return RedirectToAction("Index");
            }
    }
}
        
	
